
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Project Dashboard</title>
  <style>
  .filter-form {
    background: #f9f9f9;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
  }
  .filter-container {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 15px;
  }
  
  /* Filters */
  .filter-group {
    flex: 1;
    min-width: 250px;
  }
  
  .filter-label {
    font-weight: bold;
    display: block;
    margin-bottom: 5px;
  }
  
  .filter-input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  /* Container for dropdown */
  .dropdown {
    position: relative;
    display: inline-block;
    width: 300px; /* Wider for better readability */
  }
  
  #search_input {
    width: 100px; /* Full width to match dropdown */
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
  }
  
  .dropdown-content {
    display: none; /* Default hidden, shown dynamically */
    position: absolute;
    top: calc(100% + 4px); /* Slight gap from the input box */
    left: 0;
    width: 100%;
    background: #fff;
    border: 1px solid #ccc;
    border-radius: 4px; /* Rounded corners for better UI */
    max-height: 200px; /* Slightly taller for more options */
    overflow-y: auto; /* Scrollable when content exceeds height */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow for better visibility */
    z-index: 10;
  }
  
  .dropdown-content label {
    display: block;
    padding: 6px 12px;
    margin: 0; /* Maintain consistent spacing */
    font-size: 14px; /* Slightly larger text for readability */
    cursor: pointer; /* Indicate clickable items */
  }
  
  .dropdown-content label:hover {
    background-color: #f7f7f7; /* Highlight on hover */
  }
  
  .dropdown-content input[type="checkbox"] {
    margin-right: 8px; /* Space between checkbox and label text */
  }
    .button-group {
      display: flex;
      gap: 10px; /* Space between Filter and Clear buttons */
    }

    .btn.secondary {
      background-color: #f0f0f0;
      border: 1px solid #ccc;
      padding: 5px 10px;
      cursor: pointer;
    }

    .btn.secondary:hover {
      background-color: #e0e0e0;
    }

    #export-csv {
      margin-bottom: 20px;
      padding: 5px 10px;
      cursor: pointer;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    table th, table td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }

    table th {
      background-color: #f4f4f4;
    }
  </style>
</head>
<body>
  <!-- Filters Section -->
<form action="" method="get" class="filter-form">
  <div class="filter-container">
    <!-- Role Filter -->
    <div class="filter-group">
      <label for="search_input1" class="filter-label">Role:</label>
      <div class="dropdown">
        <input type="text" id="search_input1" class="filter-input" placeholder="Search..." onkeyup="filterDropdown('dropdown_content1')">
        <div id="dropdown_content1" class="dropdown-content">
          <% if @roles.present? %>
            <% @roles.each do |role| %>
              <label>
                <input type="checkbox" name="roles[]" value="<%= role %>"
                  <%= params[:roles]&.include?(role) ? 'checked' : '' %>>
                <%= role %>
              </label>
            <% end %>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Member Filter -->
    <div class="filter-group">
      <label for="search_input2" class="filter-label">Member:</label>
      <div class="dropdown">
        <input type="text" id="search_input2" class="filter-input" placeholder="Search..." onkeyup="filterDropdown('dropdown_content2')">
        <div id="dropdown_content2" class="dropdown-content">
          <% if @members.present? %>
            <% @members.each do |member| %>
              <label>
                <input type="checkbox" name="members[]" value="<%= member %>"
                  <%= params[:members]&.include?(member) ? 'checked' : '' %>>
                <%= member %>
              </label>
            <% end %>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Buttons -->
    <div class="button-group">
    <input type="submit" value="Filter">
      <button type="button" onclick="clearFilters()" class="btn btn-danger">Clear</button>
    </div>
  </div>
</form>
<br>
<div style="margin-bottom: 20px;">
  <button id="export-csv" onclick="exportToCsv()">Export to CSV</button>
</div>

  <!-- Table Section -->
<table class="table table-bordered">
  <thead>
    <tr>
      <th>Project Owner</th>
      <th><%= params[:roles]&.join(',') || 'Role' %></th> <!-- dynamic column -->
      <th>Project Assigned</th>
      <th>% Work Allocation</th>
      <th>Last Activity Due Date (Projects)</th>
      <th>Last Activity Due Date (Tasks)</th>
      <th>Total Hours/Month (Project Overview)</th>
      <th>Total Hours/Month (Assigned Activity)</th>
    </tr>
  </thead>
  <tbody>
    <% @aggregated_data.each do |manager| %>
      <% manager[:members].each do |member| %>
        <tr data-program-manager="<%= manager[:program_manager] %>" data-member="<%= member[:name] %>">
          <td><%= manager[:program_manager] %></td>
          <td><%= member[:name] %></td>
          <td>
            <span class="project-count-wrapper">
              <span class="project-count-number">
                <%= member[:project_count] %>
              </span>
              <span class="icon icon-help info clickable-project-count"
                    data-projects='<%= member[:project_names].to_json %>'
                    data-user-id="<%= member[:user_id] %>"
                    onclick="showProjectsModal(this)"
                    style="cursor: pointer; margin-left: 5px;">
              </span>
            </span>

          </td>
          <td class="work-allocation">
            <%= member[:total_work_allocation].presence || 0 %>%
          </td>

          <td><%= member[:last_project_activity] %></td>
          <td><%= member[:last_task_activity] %></td>
          <td><%= member[:project_hours] %></td>
          <td><%= member[:task_hours] %></td>
        </tr>
      <% end %>
    <% end %>

  </tbody>
</table>


<script>

  document.addEventListener("DOMContentLoaded", function() {
    document.querySelectorAll(".dropdown").forEach(dropdown => {
      let input = dropdown.querySelector("input");
      let dropdownContent = dropdown.querySelector(".dropdown-content");

      // Keep dropdown open when clicked
      input.addEventListener("click", function(event) {
        event.stopPropagation();
        closeAllDropdowns(dropdownContent);
        dropdownContent.style.display = "block";
      });

      // Search filter within dropdown
      input.addEventListener("keyup", function() {
        let filter = input.value.toLowerCase();
        dropdown.querySelectorAll("label").forEach(label => {
          label.style.display = label.textContent.toLowerCase().includes(filter) ? "" : "none";
        });
      });

      // Retain selected checkboxes on page reload
      let fieldName = input.getAttribute("name");
      let selectedValues = new Set(getSelectedValues(fieldName));
      dropdown.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        if (selectedValues.has(checkbox.value)) {
          checkbox.checked = true;
        }
      });

      // Handle "All" checkbox selection
      let allCheckbox = dropdown.querySelector('input[value="all"]');
      if (allCheckbox) {
        allCheckbox.addEventListener("change", function() {
          let isChecked = this.checked;
          dropdown.querySelectorAll('input[type="checkbox"]').forEach(cb => {
            cb.checked = isChecked;
          });
        });
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", function() {
      closeAllDropdowns();
    });
  });

  // Function to close all dropdowns
  function closeAllDropdowns(exception = null) {
    document.querySelectorAll(".dropdown-content").forEach(content => {
      if (content !== exception) content.style.display = "none";
    });
  }

  // Function to get selected values from URL params
  function getSelectedValues(fieldName) {
    let params = new URLSearchParams(window.location.search);
    return params.getAll(fieldName) || [];
  }

  // Function to clear all filters
  function clearFilters() {
    document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
    document.querySelectorAll(".dropdown input[type='text']").forEach(input => input.value = "");
  }


  document.addEventListener("DOMContentLoaded", function() {
    let checkboxes = document.querySelectorAll("input[type='checkbox']");

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener("change", function() {
        let name = this.name;
        let allCheckbox = document.querySelector(`input[name='${name}'][value='all']`);
        let otherCheckboxes = document.querySelectorAll(`input[name='${name}']:not([value='all'])`);

        if (this.value === "all") {
          // If "All" is checked, uncheck all others
          if (this.checked) {
            otherCheckboxes.forEach(cb => cb.checked = false);
          }
        } else {
          // If any specific value is selected, uncheck "All"
          if (this.checked) {
            allCheckbox.checked = false;
          }
        }
      });
    });
  });


  function exportToCsv() {
    let url = new URL(window.location.href); 
    console.log("Fetching CSV from:", url); 
    url.pathname = "/welcome/export_resource_management_to_csv"; 
      const filterParams = new URLSearchParams(url.search);
      const filters = [
          'roles',
          'members'
      ];
      console.log("Fetching CSV from:", filterParams);
      // Populate filter parameters dynamically
  
      console.log("Applied Filters:", Object.fromEntries(filterParams)); // Log applied filters

      const exportUrl = `/welcome/export_resource_management_to_csv?${filterParams.toString()}`;
      console.log("Fetching CSV from:", exportUrl); // Log API request URL

      fetch(exportUrl, { headers: { Accept: 'text/csv' } })
          .then(response => {
              if (!response.ok) {
                  throw new Error('Failed to fetch CSV data');
              }
              return response.blob(); // Read response as Blob
          })
          .then(blob => {
              const url = window.URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = 'resource_management.csv';
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
          })
          .catch(error => {
              console.error('Error exporting data to CSV:', error);
          });
  }
</script>

</body>
</html>

<script>
  // Function to open the modal
  function openModal(memberId) {
    const modal = document.getElementById(`customModal-${memberId}`);
    if (modal) {
      modal.style.display = 'block';
    }
  }

  // Function to close the modal
  function closeModal(memberId) {
    const modal = document.getElementById(`customModal-${memberId}`);
    if (modal) {
      modal.style.display = 'none';
    }
  }

  // Event listener for the "Details" button
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.details-button').forEach(button => {
      button.addEventListener('click', function() {
        const memberId = this.closest('.member').id.replace('member-', '');
        openModal(memberId);
      });
    });
  });
</script>

<style>
  /* User Info Icon Styles */
  .icon-info {
    color: #007bff; /* Blue color for the icon */
    font-size: 18px; /* Adjust the size of the icon */
    margin-left: 8px; /* Add some spacing */
  }

  .icon-info:hover {
    color: #0056b3; /* Darker blue on hover */
  }
  /* Custom Modal Styles */
  .custom-modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1000; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgba(0, 0, 0, 0.5); /* Black w/ opacity */
  }

  .custom-modal-content {
    background-color: #fff;
    margin: 10% auto; /* 10% from the top and centered */
    padding: 20px;
    border: 1px solid #888;
    width: 50%; /* Could be more or less, depending on screen size */
    border-radius: 5px;
  }

  .custom-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #ddd;
    padding-bottom: 10px;
    margin-bottom: 10px;
  }

  .custom-modal-title {
    margin: 0;
  }

  .custom-modal-close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
  }

  .custom-modal-body {
    margin-bottom: 20px;
  }

  .custom-modal-footer {
    text-align: right;
  }
</style>

<div id="projects-modal" class="modal" style="display: none;">
  <div class="modal-content">
    <span class="close" onclick="closeModal()">&times;</span>
    <h3>Projects List & Work Allocation</h3>

    <table class="table table-bordered">
      <thead>
        <tr>
          <th>Project Name</th>
          <th>Work Allocation (%)</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="projects-list">
        <!-- Table rows will be inserted here via JS -->
      </tbody>
    </table>
  </div>
</div>




<style>
  .modal {
    position: fixed;
    z-index: 999;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
  }

  .modal-content {
    background-color: #fff;
    margin: 10% auto;
    padding: 20px;
    width: 40%;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
  }

  .close {
    float: right;
    font-size: 22px;
    font-weight: bold;
    cursor: pointer;
  }

  #projects-list li {
    padding: 5px 0;
  }
</style>


<script>
  function closeModal() {
    document.getElementById("projects-modal").style.display = "none";
  }

  function showProjectsModal(el) {
    const projects = JSON.parse(el.dataset.projects);
    const userId = el.dataset.userId;
    const tbody = document.getElementById("projects-list");
    tbody.innerHTML = "";

    projects.forEach(project => {
      const tr = document.createElement("tr");

      tr.innerHTML = `
        <td><a href="/projects/${project.identifier}" target="_blank">${project.name}</a></td>
        <td>
          <input type="number" value="${project.allocation || ''}" 
                 data-project-id="${project.id}" data-user-id="${userId}" min="0" max="100">
        </td>
        <td>
          <button onclick="saveWorkAllocation(this, ${project.member_id || null})">Save</button>
          <button onclick="deleteWorkAllocation(this)">Delete</button>
        </td>
      `;

      tbody.appendChild(tr);
    });

    document.getElementById("projects-modal").style.display = "block";
  }

  function saveWorkAllocation(button, memberId) {
    const row = button.closest("tr");
    const input = row.querySelector("input");
    const userId = input.dataset.userId;
    const projectId = input.dataset.projectId;
    const value = input.value;

    const url = memberId ? `/work_allocations/${memberId}` : `/work_allocations`;
    const method = memberId ? 'PATCH' : 'POST';

    fetch(url, {
      method: method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: userId, project_id: projectId, work_allocation: value })
    })
    .then(resp => resp.json())
    .then(data => {
      if (data.success) {
        alert("Saved successfully");
      } else {
        alert("Save failed");
      }
    });
  }

  function deleteWorkAllocation(button) {
    const row = button.closest("tr");
    const input = row.querySelector("input");
    const userId = input.dataset.userId;
    const projectId = input.dataset.projectId;

    fetch(`/work_allocations/0`, {
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user_id: userId, project_id: projectId })
    })
    .then(resp => resp.json())
    .then(data => {
      if (data.success) {
        alert("Deleted successfully");
        row.remove();
      } else {
        alert("Delete failed");
      }
    });
  }
</script>

